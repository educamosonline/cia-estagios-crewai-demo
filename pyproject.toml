[tool.poetry]
name = "ce-demo"
version = "0.1.0"
description = "CrewAI Enterprise Demo Application"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
python = "^3.11"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
crewai = "^0.28.0"
langchain = "^0.1.0"
openai = "^1.9.0"
sqlalchemy = "^2.0.25"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
redis = "^5.0.1"
python-dotenv = "^1.0.0"
pyyaml = "^6.0.1"
click = "^8.1.7"
rich = "^13.7.0"
prometheus-client = "^0.19.0"
structlog = "^24.1.0"
pandas = "^2.1.0"
numpy = "^1.26.0"
qdrant-client = "^1.8.0"
psycopg = "^3.1.0"
langdetect = "^1.0.9"
scipy = "^1.11.0"
tqdm = "^4.66.0"
faker = "^20.1.0"
pyarrow = "^14.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-benchmark = "^4.0.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
httpx = "^0.26.0"
black = "^23.12.1"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
isort = "^5.12.0"
interrogate = "^1.5.0"
bandit = "^1.7.5"
pylint = "^3.0.0"
safety = "^3.0.1"
psutil = "^5.9.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Type checking for external libraries
[[tool.mypy.overrides]]
module = [
    "faker.*",
    "langdetect.*",
    "crewai.*",
    "qdrant_client.*",
    "tqdm.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Interrogate Configuration (Docstring Coverage)
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 90
exclude = ["setup.py", "docs", "migrations", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

# Bandit Security Linter Configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]